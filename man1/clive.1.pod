=head1 NAME

clive - (c)ommand (li)ne (v)ideo (e)xtration tool

=head1 DESCRIPTION

clive is a command line video extraction tool for Youtube and other similar
video websites that require Adobe Flash for viewing the videos.

=head1 HISTORY

In 2006 clive was a little more than a simple shell script that could be
used to extract flash videos from Youtube for viewing them with an
external player software. The primary motivation for writing clive was
to work around the flash player plugin which, at the time, was less
than a pleasant experience on Linux.

clive was rewritten in Python and released to the public in the
early 2007. It was rewritten again in the late 2008, this time in
Perl.

The development work of 2.3 started in the late 2010 as "gws" or
"glorified wrapper script". The 2.3 was an attempt to make better
use of the already existing tools, such as C<quvi(1)>.

=head1 GETTING STARTED

See L</FILES> for an example configuration file. You should consider
setting at least L</--quvi> and L</--get-with> in your configuration
file for seamless use.

The sections L</TROUBLESHOOTING> and L</EXAMPLES> contain invaluable
information about using clive.

=head1 OPTIONS

=over 4

=item B<--help>

Print help and exit.

=item B<--version>

Print version and exit.

=item B<--license>

Print license and exit.

=item B<--quiet>

Turn off all I<clive> output excluding errors. Note that this switch has no
effect on any of the third party commands that clive invokes.

=item B<-f, --format> I<arg>

Download I<arg> format of the video. I<arg> can also be C<help>.

=item B<-O, --output-file> I<arg>

Write video to I<arg>.

=item B<-n, --no-download>

Do not download the video, display video details only.

=item B<--config-file> I<arg>

Path to a file to read clive arguments from. See also L</FILES>.

=back

=head1 OPTIONS - CONFIGURATION

In addition to the command line, the options may also be read from the
configuration file. See L</FILES>.

=over 4

=item B<--quvi> I<arg>

I<arg> to be invoked to start the C<quvi(1)> command which clive uses to
parse the video details. This is typically a full path to C<quvi(1)> with
any additional options.

The following specifiers can be used in the I<arg>:

    %u .. Video URL

I<All> occurences of the specifier will be replaced. clive will
automatically append C<--quiet> to I<arg>.

NOTE: If you use an HTTP proxy with C<quvi(1)>, you should do the same with
C<--get-with> -- especially if the proxy masks your IP. Some websites may
refuse connections originating from different IPs to (unique, generated)
video download URLs.

=item B<--get-with> I<arg>

Path to a download command (e.g. C<wget(1)> or C<curl(1)>) with any additional
arguments. clive invokes this command to download the video. The following
specifiers are supported:

    %u  Video download URL
    %f  Full path to video file
    %n  Video file name

Note that I<all> occurences of the specifier will be replaced. See also the
note above about using an HTTP proxy with C<--quvi>.

=item B<--filename-format> I<arg>

Use I<arg> to specify the video output filename format. The default is "%t.%s".
The following specifiers are supported:

    %t  Video title (after applying --regexp)
    %i  Video ID
    %h  Video host ID (req. quvi 0.2.8+)
    %s  Video file suffix (parsed from server returned content-type)

Note that I<all> occurences of the specifier will be replaced.

=item B<--regexp> I<arg>

Use regular expression I<arg> to clean up the video title before
it is used in the output filename. The default is "/(\w|\s)/g".

Note that the syntax supports both "i" (case-insensitive) and "g"
(global or find all).

=item B<--exec> I<arg>

Invoke I<arg> after video download finishes. The following specifiers
are supported:

    %f  Full path to the downloaded video file

Note that I<all> occurences of the specifier will be replaced.

=back

=head1 TROUBLESHOOTING

=over 4

=item B<error: specify path to quvi(1) command with --quvi>

clive uses C<quvi(1)> to parse the video details. Use the C<--quvi> to specify
the path. See also L</FILES>.

=item B<error: specify path to a download command with --get-with>

clive uses a 3rd party command to download the videos. Use the C<--get-with> to
specify the path to such command. See also L</FILES>.

=back

=head1 FILES

=over 4

=item B<~/.cliverc>

Additional search paths:

    ~/.clive/config
    ~/.config/clive/config

For a system-wide configuration:

    /usr/local/share/clive/config
    /usr/share/clive/config
    /etc/clive/config
    /etc/xdg/clive/clive.conf
    /etc/xdg/clive.conf

You can also set CLIVE_CONFIG, e.g.:

    env CLIVE_CONFIG=/path/to/config/file clive

Or use C<--config-file>, e.g.:

    clive --config-file /path/to/config/file

A typical configuration file could look like:

    --quvi "/usr/bin/quvi %u"
 # Recommended value for quvi 0.2.12+
 #  --quvi "/usr/bin/quvi --category-http %u"
    --get-with "/usr/bin/curl -L -C - -o %f %u"
    --filename-format "%t_%i.%s"
    --exec "/usr/bin/vlc %f"

If you are unsure, consider setting at least the C<--quvi> and
C<--get-with> in your configuration file.

=back

=head1 EXAMPLES

These examples assume you have set C<--quvi> and C<--get-with> in the config
file. See L</FILES> for an example config file.

=over 4

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc">

Typical use.

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc" -f mp4_360p>

Same but get the mp4_360p format of the video.

=item B<clive -f help>

Help on how you can use the C<--format> option.

=item B<clive -f list>

Lists all C<quvi(1)> supported websites with formats.

=item B<clive -f list dailymotion>

Lists dailymotion formats. The pattern is matched to C<quvi(1)>
returned website domain strings. For example:

=item B<clive -f list dailym>

Would yield the same results.

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc" -n>

Do not download the video. Print the video details only.

=item B<echo "http://www.youtube.com/watch?v=DUM1284TqFc" | clive>

A fancy way to feed clive an URL.

clive can handle multiple URLs in one go. One way to do this, is to
specify each on the command line as arguments. An alternative source
could be a file. For example:

  cat >> urls.lst
  http://www.youtube.com/watch?v=DUM1284TqFc
  http://www.youtube.com/watch?v=TqgTz8ymZl8
  (CTRL+D)
  clive < urls.lst

Make a note that each URL must be separated with a newline character.

=back

=head1 EXIT STATUS

clive exits with 0 on success, otherwise the code is E<gt>0. Strictly clive
exit statuses are 0 or 1. For example, if command line parsing fails, the exit
status is 1.

When an error occurs in another command invoked by clive, e.g. C<quvi(1)>,
clive exits with the exit status returned by the command.

If you are planning to use clive for anything more peculiar, you should feed
it only one URL at a time. For example:

    * You feed clive two URLs
    * The 1st one fails, quvi exits with a non-zero value
    * clive proceeds to the 2nd URL, quvi now exits with zero value
    * clive exits with the zero, even if the 1st URL failed

=head1 SEE ALSO

C<quvi(1)>  C<wget(1)>  C<curl(1)>

=head1 WWW

<http://clive.sourceforge.net/>

<http://quvi.sourceforge.net/>

=head1 AUTHOR

Toni Gundogdu E<lt>legatvs at sign gmail comE<gt>

Thanks to all those who have contributed to the project by sending
patches, reporting bugs and writing feedback. You know who you are.
