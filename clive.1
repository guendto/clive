.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "clive 1"
.TH clive 1 "2009-04-07" "2.1.11" "clive manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
clive \- the non\-interactive video extraction utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
clive [option]... [\s-1URL\s0]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
clive is a command line utility for extracting videos from Youtube and other
video sharing Web sites. It was originally written to bypass the Adobe Flash
requirement needed to view the hosted videos.
.PP
clive can be non-interactive. This means it can work in the background
while the user is not logged on, allowing the user to start an extraction
and disconnect from the system and letting clive finish the work.
.PP
clive was influenced by the \s-1GNU\s0 \fIwget\fR\|(1) utility. Kudos to the wget team
for their original work.
.SH "OPTION SYNTAX"
.IX Header "OPTION SYNTAX"
You may freely mix different option styles, or specify options after the
command-line arguments. For example:
  % clive \-c \-\-format=mp4 \s-1URL\s0 \-n
.PP
You may also put several options together that do not require arguments.
For example:
  % clive \-pcn \s-1URL\s0
.PP
Which is equivalent to:
  % clive \-p \-c \-n \s-1URL\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h \-\-help\fR" 4
.IX Item "-h --help"
Print this help and exit.
.IP "\fB\-v \-\-version\fR" 4
.IX Item "-v --version"
Print version and exit.
.IP "\fB\-\-hosts\fR" 4
.IX Item "--hosts"
Print supported hosts and exit.
.IP "\fB\-b \-\-background\fR" 4
.IX Item "-b --background"
Go to background immediately after startup. If no output file is specified
using the \fB\-\-output\fR or \fB\-\-append\fR, the output is redirected to \fIclive-log\fR
file. Implies \fB\-\-progress=\fR\fIdot\fR.
.IP "\fB\-e \-\-emit\-csv\fR" 4
.IX Item "-e --emit-csv"
Do not extract any videos, instead print the video details as \s-1CSV\s0 to stdout.
Ignores the \fB\-\-quiet\fR option for \s-1CSV\s0.
.IP "\fB\-E \-\-emit\-xml\fR" 4
.IX Item "-E --emit-xml"
Equivalent to \fB\-\-emit\-csv\fR in every way but the output is \s-1XML\s0. Negates
\&\fB\-\-emit\-csv\fR.
.IP "\fB\-V \-\-clivepass=\fR\fIpath\fR" 4
.IX Item "-V --clivepass=path"
\&\fIpath\fR to the \fIclivepass\fR\|(1) utility. If \s-1CLIVEPASS_PATH\s0 environment
variable is set, it will will used.
.PP
\&\fB\s-1HTTP\s0 options\fR
.IP "\fB\-U \-\-agent=\fR\fIstring\fR" 4
.IX Item "-U --agent=string"
Identify as \fIstring\fR to the \s-1HTTP\s0 server. Defaults is \*(L"Mozilla/5.0\*(R".
.IP "\fB\-y \-\-proxy=\fR\fIaddress\fR" 4
.IX Item "-y --proxy=address"
Use \fIaddress\fR for \s-1HTTP\s0 proxy, e.g. http://foo:1234. If undefined,
uses the http_proxy environment setting if present.
.IP "\fB\-X \-\-no\-proxy\fR" 4
.IX Item "-X --no-proxy"
Do not use \s-1HTTP\s0 proxy.
.IP "\fB\-\-connect\-timeout=\fR\fIseconds\fR" 4
.IX Item "--connect-timeout=seconds"
Maximum time in \fIseconds\fR allowed the connection to the server to take.
This limits only the connection phase. \fBclive\fR will only timeout
on the system's internal timeouts by default.
.Sp
http://curl.haxx.se/docs/knownbugs.html:
.Sp
.Vb 4
\&  "34. The SOCKS4 connection codes don\*(Aqt properly acknowledge
\&  (connect) timeouts. Also see #12. According to bug #1556528,
\&  even the SOCKS5 connect code does not do it right:
\&    http://curl.haxx.se/bug/view.cgi?id=1556528"
\&
\&  "12. When connecting to a SOCKS proxy, the (connect) timeout
\&  is not properly acknowledged after the actual TCP connect
\&  (during the SOCKS \*(Aqnegotiate\*(Aq phase)."
.Ve
.Sp
See also \fB\-\-connect\-timeout\-socks\fR.
.IP "\fB\-\-connect\-timeout\-socks=\fR\fI\s-1SECONDS\s0\fR" 4
.IX Item "--connect-timeout-socks=SECONDS"
Same as above but works around the \s-1SOCKS\s0 proxy bug by using \s-1CURLOPT_TIMEOUT\s0
instead of \s-1CURLOPT_CONNECTIMEOUT\s0. Ignored for file transfers, otherwise
curl could interrupt already started transfers.
.Sp
More about these two options:
  http://curl.haxx.se/libcurl/c/curl_easy_setopt.html
.PP
\&\fBCache Options\fR
.IP "\fB\-R \-\-renew\fR" 4
.IX Item "-R --renew"
Renew cache entries for the re-visited URLs. See \*(L"\s-1CACHE\s0\*(R" in the manual page.
.IP "\fB\-s \-\-show\fR" 4
.IX Item "-s --show"
Print all cache entries to standard output.
.IP "\fB\-H \-\-show\-format=\fR\fIstring\fR" 4
.IX Item "-H --show-format=string"
Format printed entries using the \fIstring\fR. Default is '%D: \*(L"%t\*(R" | \f(CW%mMB\fR'.
The following specifiers are supported:
  \f(CW%t\fR = video page title
  \f(CW%i\fR = video id
  \f(CW%l\fR = video file length (bytes)
  \f(CW%u\fR = video page url
  \f(CW%x\fR = video extraction url
  \f(CW%D\fR = video extraction date
  \f(CW%T\fR = video extraction time
  \f(CW%S\fR = video extraction timestamp (same as: \f(CW%D\fR \f(CW%T\fR)
.IP "\fB\-g \-\-grep=\fR\fIpattern\fR" 4
.IX Item "-g --grep=pattern"
Grep cache entries for \fIpattern\fR. Matching is \fBnot\fR restricted to any
specific cache entry field (e.g. title or id).
  % clive \-\-grep=git
  % clive \-\-grep=^git \-\-ignore\-case
.Sp
The matched entries are then extracted. To only show the matches, use the
\&\fB\-\-show\fR option. For example:
  % clive \-sg ^git
.IP "\fB\-i \-\-ignore\-case\fR" 4
.IX Item "-i --ignore-case"
Causes clive to ignore case-differences with \fB\-\-grep\fR.
.IP "\fB\-D \-\-delete\fR" 4
.IX Item "-D --delete"
Delete grep-matched entries from the cache. If used with the \fB\-\-show\fR
option, clive will prompt before deleting, e.g.:
  % clive \-siDg ^git
.IP "\fB\-C \-\-clear\fR" 4
.IX Item "-C --clear"
Clear cache and exit.
.PP
\&\fBLogging and Input Options\fR
.IP "\fB\-o \-\-output=\fR\fIlogfile\fR" 4
.IX Item "-o --output=logfile"
Log all messages to \fIlogfile\fR. The messages are normally reported to
stdout and stderr.
.IP "\fB\-a \-\-append=\fR\fIlogfile\fR" 4
.IX Item "-a --append=logfile"
Append to \fIlogfile\fR. This is the same as \fB\-\-output\fR but appends to
\&\fIlogfile\fR instead of overwriting it. If the \fIlogfile\fR does not exist,
it is created.
.IP "\fB\-d \-\-debug\fR" 4
.IX Item "-d --debug"
Causes the program to print Curl debug messages.
.IP "\fB\-q \-\-quiet\fR" 4
.IX Item "-q --quiet"
Turn off all output.
.IP "\fB\-r \-\-recall\fR" 4
.IX Item "-r --recall"
Recall the last \s-1URL\s0 batch from the previous runtime. Note that clive overwrites
this information at every runtime. See also \*(L"\s-1CACHE\s0\*(R".
.IP "\fB\-T \-\-savebatch=\fR\fIfile\fR" 4
.IX Item "-T --savebatch=file"
Save current \s-1URL\s0 batch to \fIfile\fR.
.IP "\fB\-p \-\-paste\fR" 4
.IX Item "-p --paste"
Paste input from clipboard. The pasted URLs are expected to be separated with
newlines.
.IP "\fB\-\-stderr\fR" 4
.IX Item "--stderr"
Redirect all input to stderr, even if no \s-1TTY\s0 is available.
.PP
\&\fBDownload Options\fR
.IP "\fB\-O \-\-output\-video=\fR\fIfile\fR" 4
.IX Item "-O --output-video=file"
Write video to \fIfile\fR.
.IP "\fB\-n \-\-no\-extract\fR" 4
.IX Item "-n --no-extract"
Do not actually extract any videos.
.IP "\fB\-c \-\-continue\fR" 4
.IX Item "-c --continue"
Continue extraction of a partially downloaded file. Note that this works only
with \s-1HTTP\s0 servers that support the \*(L"Range\*(R" header. Ignored unless \fIlocalfile\fR
< \fIremotefile\fR.
.Sp
The \*(L"requested range was not delivered\*(R" error typically implies that the
host does not allow continuing partially extracted video files. You will
see this error if you attempt to continue a partially downloaded flv video
from Youtube, for example.
.IP "\fB\-W \-\-overwrite\fR" 4
.IX Item "-W --overwrite"
Causes clive to overwrite already existing video files. By default clive
appends a numeric suffix to the output filename.
.IP "\fB\-G \-\-progress=\fR\fItype\fR" 4
.IX Item "-G --progress=type"
Select the \fItype\fR of the progress indicator. Accepted types are \*(L"bar\*(R",
\&\*(L"dot\*(R" and \*(L"none\*(R".
.Sp
The \*(L"bar\*(R" indicator is used by default. It spews out some details indicating
the status of retrieval. If the output is not a \s-1TTY\s0, the \*(L"dot\*(R" bar will be
used instead.
.Sp
Use \-\-progress=dot to switch to the \*(L"dot\*(R" display. It traces the retrieval
by printing dots on the screen, each dot representing a fixed amount of
downloaded data.
.Sp
When using the dotted retrieval, you may also set the style by specifying
the \fItype\fR as dot:style.
  \-\-progress=dot:default
    each dot 1K, 10\-dots clusters, 50\-dots lines
  \-\-progress=dot:binary
    each dot  8K, 16\-dots clusters, 48\-dots lines
  \-\-progress=dot:mega
    each dot 64K,  8\-dots clusters, 48\-dots lines
.Sp
Progress indication can be disabled completely by setting \fItype\fR to \*(L"none\*(R".
.IP "\fB\-u \-\-youtube\-user=\fR\fIusername\fR" 4
.IX Item "-u --youtube-user=username"
\&\fIusername\fR to log into Youtube. Typically needed only if you are planning
to extract videos flagged as mature-content.
.IP "\fB\-t \-\-youtube\-pass=\fR\fIpassword\fR" 4
.IX Item "-t --youtube-pass=password"
\&\fIpassword\fR to log into Youtube. If \fIpassword\fR is \*(L"\-\*(R", causes clive to
retrieve the login password from the \fIclivepass\fR\|(1) utility. See \*(L"\s-1EXAMPLES\s0\*(R".
.IP "\fB\-L \-\-no\-login\fR" 4
.IX Item "-L --no-login"
Do not log into Youtube.
.IP "\fB\-S \-\-savedir=\fR\fIdir\fR" 4
.IX Item "-S --savedir=dir"
Save extracted videos to \fIdir\fR.
.IP "\fB\-f \-\-format=\fR\fIformat\fR" 4
.IX Item "-f --format=format"
Extract \fIformat\fR of the video. All supported websites have at least the flv
format available. See \*(L"\s-1FORMATS\s0\*(R" for more.
.IP "\fB\-l \-\-cclass=\fR\fIcharacter-class\fR" 4
.IX Item "-l --cclass=character-class"
Use \fIcharacter-class\fR to filter the video page titles. Default is \fB\ew\fR.
The filtered video page titles are used to name the extracted videos.
.IP "\fB\-N \-\-filename\-format=\fR\fIstring\fR" 4
.IX Item "-N --filename-format=string"
Use \fIstring\fR to construct the name of the extracted video. Default is
\&\*(L"%t_%d_%i.%s\*(R". The following specifiers are supported:
  \f(CW%t\fR = video title (after applying \-\-cclass)
  \f(CW%i\fR = video id
  \f(CW%d\fR = video domain
  \f(CW%s\fR = video suffix
  \f(CW%D\fR = current date
  \f(CW%T\fR = current time
  \f(CW%S\fR = timestamp (same as \f(CW%D\fR \f(CW%T\fR)
.IP "\fB\-x \-\-exec=\fR\fIcommand\fR\fB;\fR" 4
.IX Item "-x --exec=command;"
Execute \fIcommand\fR. Optional arguments may be passed to the command.
The expression must be terminated by a semicolon (\*(L";\*(R"). If the specifier
\&\*(L"%i\*(R" appears anywhere in \fIcommand\fR name or the arguments it is replaced
by the pathname of the extracted video file.
.Sp
Example:
  % clive \-\-exec=\*(L"mplayer \f(CW%i\fR;\*(R" \s-1URL\s0
.IP "\fB\-x, \-\-exec=\fR\fIcommand\fR\fB+\fR" 4
.IX Item "-x, --exec=command+"
Same as \fB\-\-exec\fR, except that \*(L"%i\*(R" is replaced with as many pathnames
as possible for the invocation of \fIcommand\fR.
.IP "\fB\-\-stream\-exec=\fR\fIcommand\fR" 4
.IX Item "--stream-exec=command"
Execute \fIcommand\fR when file transfer progress reaches \fIpercent\fR as defined
with the \fB\-\-stream\fR option. The \*(L"%i\*(R" specifier for video pathname is expected
to appear somewhere in the \fIcommand\fR expression.
.Sp
Unlike the \fB\-\-exec\fR option which is executed subsequently after each file
transfer, \fBclive\fR forks the streaming process and continues with the file
transfer \*(-- and will not continue to download another file until the child
process terminates.
.Sp
It should also be noted that \fBclive\fR makes no effort to check whether there
is enough data to be streamed. It assumes the user knows how much data needs
to be buffered before starting the child process. Similarly, if the transfer
rate drops significantly after starting the process and it runs out of data,
\&\fBclive\fR simply ignores that.
.Sp
Some players and formats may not work properly with this feature. Try
\&\fImplayer\fR\|(1) and choose flv if you are unsure.
.IP "\fB\-\-stream=\fR\fIpercent\fR" 4
.IX Item "--stream=percent"
Execute the \fIcommand\fR defined with the \fB\-\-stream\-exec\fR option when the file
transfer progress reaches \fIpercent\fR.
.Sp
Example:
  % clive \-\-stream\-exec=\*(L"mplayer \-really\-quiet \f(CW%i\fR\*(R" \-\-stream=20 \s-1URL\s0
.IP "\fB\-\-limit\-rate=\fR\fIamount\fR" 4
.IX Item "--limit-rate=amount"
Limit video download rate to \fIamount\fR KB/s.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "Typical use:" 4
.IX Item "Typical use:"
% clive \*(L"http://youtube.com/watch?v=3HD220e0bx4\*(R"
.IP "Multiple video URLs:" 4
.IX Item "Multiple video URLs:"
% cat >> url.lst
  http://en.sevenload.com/videos/IUL3gda\-Funny\-Football\-Clips
  http://youtube.com/watch?v=3HD220e0bx4
  http://break.com/index/beach\-tackle\-whip\-lash.html
  http://www.liveleak.com/view?i=704_1228511265
.Sp
% cat url.lst | clive
.IP "Combine input from multiple sources:" 4
.IX Item "Combine input from multiple sources:"
% clive \-p \s-1URL\s0 \s-1URL2\s0
.IP "Recall the last \s-1URL\s0 batch, extract mp4 video format:" 4
.IX Item "Recall the last URL batch, extract mp4 video format:"
% clive \-rf mp4
.IP "Grep for the pattern in cache, extract matched videos:" 4
.IX Item "Grep for the pattern in cache, extract matched videos:"
% clive \-g 3HD220e0bx4
.IP "Same as above but \fIdelete\fR the matched entries from cache:" 4
.IX Item "Same as above but delete the matched entries from cache:"
% clive \-iDg ^3hd2
.Sp
Note the use of \-i (\-\-ignore\-case).
.IP "Print cache contents to stdout:" 4
.IX Item "Print cache contents to stdout:"
% clive \-s
.IP "Combine matching and printing cache entries:" 4
.IX Item "Combine matching and printing cache entries:"
% clive \-sig ^3hd2
.Sp
Note that \-s negates video extraction.
.IP "Match, redirect output to \fImy.log\fR, go to background:" 4
.IX Item "Match, redirect output to my.log, go to background:"
% clive \-big ^3hd2 \-o my.log
.IP "Extract video from \s-1URL\s0, re-encode audio to mp3:" 4
.IX Item "Extract video from URL, re-encode audio to mp3:"
% clive \-\-exec=\*(L"ffmpeg \-y \-i \f(CW%i\fR \f(CW%i\fR.mpg;\*(R" \s-1URL\s0
.IP "Login to Youtube to extract a video:" 4
.IX Item "Login to Youtube to extract a video:"
% clive \-u myusername \-t mypassword \s-1URL\s0
.Sp
This isn't typically needed unless you are trying to extract videos flagged
as mature content.
.IP "Use protected login password:" 4
.IX Item "Use protected login password:"
Otherwise same as above but the login info is saved to a clivepass password
repository file. The saved passwords are encrypted.
.Sp
Note that you will need to install the clive-utils for this. See the \*(L"\s-1OTHER\s0\*(R"
section for details.
.Sp
Create new password repository:
  % clivepass \-\-create
.Sp
Add new login name \*(L"myusername\*(R":
  % clivepass \-\-add myusername
.Sp
Use the created login info from clive:
  % clive \-u myusername \-t \- \-V /usr/bin/clivepass \s-1URL\s0
.Sp
This causes \fBclive\fR to request for the login password for \*(L"myusername\*(R" from
\&\fIclivepass\fR\|(1). The password is then used to login to Youtube before extracting
the video from the \s-1URL\s0.
.SH "FORMATS"
.IX Header "FORMATS"
clive defaults to extract the flv format unless the \fB\-\-format\fR option is
used. The requested format may not always be available. The server typically
returns one of the HTTP/40x errors if the requested format is not available.
.PP
The quality of the video depends on the uploaded video quality. Each website
typically recompresses the uploaded videos to 320x240 resolution (sometimes
higher). Because this varies per video and website, you should treat the
list below only as a rough reference of what formats should be available.
.IP "\fBwww.youtube.com\fR" 4
.IX Item "www.youtube.com"
.PD 0
.IP "\fBwww.last.fm\fR" 4
.IX Item "www.last.fm"
.PD
Formats: (flv|mp4|mp4_hd|3gpp|xflv)  Continue: Yes (except flv)
.Sp
mp4 and 3gpp formats are typically, or will soon become, available.
xflv appears to be very rare. Videos dating back to 2006 may only be
available as flv. The high-definition mp4_hd format is currently available
for a limited number of videos, which are usually explicitly marked as \*(L"\s-1HD\s0\*(R"
or \*(L"720p\*(R".
.Sp
Some of the videos displayed on last.fm site are actually Youtube videos.
You can pass the lastfm'ed video URLs to \fBclive\fR.
.IP "\fBvideo.google.com\fR" 4
.IX Item "video.google.com"
Formats: (flv|mp4)  Continue: Only mp4
.Sp
The mp4 may not always be available. GoogleVideo mp4 are encoded using a
different codec than Youtube mp4 videos. You can typically \fB\-\-stream\-exec\fR
Youtube mp4 videos but this is not case with GoogleVideo mp4 videos. If you
find a way, drop an email.
.IP "\fBwww.sevenload.com\fR" 4
.IX Item "www.sevenload.com"
Formats: flv  Continue: Yes
.IP "\fBwww.break.com\fR" 4
.IX Item "www.break.com"
Formats: flv  Continue: Yes
.IP "\fBwww.liveleak.com\fR" 4
.IX Item "www.liveleak.com"
Formats: flv  Continue: Yes
.IP "\fBwww.evisor.tv\fR" 4
.IX Item "www.evisor.tv"
Formats: flv  Continue: Yes
.IP "\fBwww.dailymotion.com\fR" 4
.IX Item "www.dailymotion.com"
Formats: (spark|spak\-mini|vp6\-hq|vp6\-hd|vp6|h264)  Continue: Yes
.Sp
spark is the \*(L"regular\*(R" 320x240 flv. \fBclive\fR defaults to spark
if requested format is not available.
.IP "\fBtv.cctv.com\fR" 4
.IX Item "tv.cctv.com"
Formats: flv  Continue: Yes
.SH "CACHE"
.IX Header "CACHE"
The cache has two purposes:
.IP "1." 4
Keep reusable video data available for fast re-extraction.
.IP "2." 4
Keep a record of extracted videos.
.PP
Each cache entry contains information about a video, including, but not limited
to, page title, file length and extraction \s-1URL\s0. You can use the \fB\-\-grep\fR option
to match these details when you are searching for videos from the cache. See
the \*(L"\s-1EXAMPLES\s0\*(R" section for examples of how to do this.
.PP
Some entries may need to be renewed from time to time as certain websites have
their extraction URLs expire after awhile. Youtube is an example of this.
Youtube servers usually return the \s-1HTTP/410\s0 error if the extraction \s-1URL\s0 has
expired. You can use the \fB\-\-renew\fR option to fix this.
.PP
Note that \fBclive\fR renews the cache entry automatically if the video format
does not match the cached video format string. This is done for two reasons:
.IP "1." 4
Cached video extraction \s-1URL\s0 points to a different location
.IP "2." 4
Cached video file length is likely to be incorrect
.SH "UNICODE"
.IX Header "UNICODE"
The author has had some success with \fIuxterm\fR\|(1) previously. Truth to be told,
this is by far one of the least favorite topics of mine. I blame Python (partly)
for this. See your local unicode-expert on this.
.PP
My two cents: As long as the terminal is unicode capable and the used terminal
font supports the characters, this shouldn't be a problem. You may want to use
\&\fB\-\-cclass\fR=. when you are running tests. That disables video title filtering.
.SH "FILES"
.IX Header "FILES"
clive searches the ~/.config/clive directory for the config file. You can
override this by setting the \fB\s-1CLIVE_HOME\s0\fR environment variable.
.IP "~/.config/clive/config" 4
.IX Item "~/.config/clive/config"
Configuration file for clive.
.IP "~/.config/clive/cache" 4
.IX Item "~/.config/clive/cache"
Contains the cache entries of the visited URLs. A Berkeley \s-1DB\s0 (Hash) file.
.IP "~/.config/clive/recall" 4
.IX Item "~/.config/clive/recall"
Contains the last \s-1URL\s0 batch. You can \fB\-\-recall\fR this file.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
clive exits 0 on success, and >0 if an error occurs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIclivefeed\fR\|(1) \fIclivescan\fR\|(1) \fIclivepass\fR\|(1)
.SH "OTHER"
.IX Header "OTHER"
Homepage:
  <http://clive.sourceforge.net/>
.PP
Project page:
  <http://code.google.com/p/clive/>
.PP
Development repository can be cloned with:
  % git clone git://repo.or.cz/clive.git
.PP
For release announcements, subscribe to the project at:
  <http://freshmeat.net/projects/clive/>
.PP
Additional utilities (clive-utils):
  <http://code.google.com/p/clive\-utils/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Toni Gundogdu <legatvs@gmail.com>.
