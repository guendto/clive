=head1 NAME

clive - command line video extraction tool

=head1 DESCRIPTION

clive is a command line video extraction tool for Youtube and other similar
video websites that require Adobe Flash for viewing the content.

As of clive 2.3+ uses C<quvi(1)> for parsing the video details and the
user-defined command to download the video. See L</--quvi>,
L</--get-with> and L</FILES> for more about these.

=head1 OPTIONS

=over 4

=item B<--help>

Print help and exit.

=item B<--version>

Print version and exit.

=item B<--license>

Print license and exit.

=item B<--quiet>

Turn off all I<clive> output excluding errors. Note that this switch has no
effect on any of the third party commands that clive invokes.

=item B<-f, --format> I<arg>

Download I<arg> format of the video. I<arg> can also be C<help>.

=item B<-O, --output-file> I<arg>

Write video to I<arg>.

=item B<-n, --no-download>

Do not download the video, display video details only.

=item B<--config-file> I<arg>

Path to a file to read clive arguments from. See also L</FILES>.

=back

=head1 OPTIONS - CONFIGURATION

You can specify I<any> of the the command line options in the configuration
file. These options are under C<Configuration> for superficial reasons
(C<--help> output) only.

=over 4

=item B<--quvi> I<arg>

Path to C<quvi(1)> command with any additional arguments. clive invokes this
command to parse the video details (e.g. download URL). The following
specifiers are supported:

    %u  Video URL

Note that I<all> occurences of the specifier will be replaced. clive also
appends C<--quiet> to I<arg> if it's not found.

If you use an HTTP proxy with C<quvi(1)>, you should do the same with
C<--get-with>, especially the proxy masks your IP. Some websites refuse
to work with requests for unique URLs coming from different IPs.

=item B<--get-with> I<arg>

Path to a download command (e.g. C<wget(1)> or C<curl(1)>) with any additional
arguments. clive invokes this command to download the video. The following
specifiers are supported:

    %u  Video download URL
    %f  Full path to video file
    %n  Video file name

Note that I<all> occurences of the specifier will be replaced. See also the
note above about using an HTTP proxy with C<--quvi>.

=item B<--filename-format> I<arg>

Use I<arg> to specify the video output filename format. The default is "%t.%s".
The following specifiers are supported:

    %t  Video title (after applying --regexp)
    %i  Video ID
    %h  Video host ID (req. quvi 0.2.8+)
    %s  Video file suffix (parsed from server returned content-type)

Note that I<all> occurences of the specifier will be replaced.

=item B<--regexp> I<arg>

Use regular expression I<arg> to clean up the video title before
it is used in the output filename. The default is "/(\w|\s)/g".

Note that the syntax supports both "i" (case-insensitive) and "g"
(global or find all).

=item B<--exec> I<arg>

Invoke I<arg> after video download finishes. The following specifiers
are supported:

    %f  Full path to the downloaded video file

Note that I<all> occurences of the specifier will be replaced.

=back

=head1 EXAMPLES

These examples assume you have set C<--quvi> and C<--get-with> in the config
file. See L</FILES> for an example config file.

=over 4

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc">

Typical use.

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc" -f mp4_360p>

Same but get the mp4_360p format of the video.

=item B<clive -f help>

Help on how you can use the C<--format> option.

=item B<clive -f list>

Lists all C<quvi(1)> supported websites with formats.

=item B<clive -f list dailymotion>

Lists dailymotion formats. The pattern is matched to C<quvi(1)>
returned website domain strings. For example:

=item B<clive -f list dailym>

Would yield the same results.

=item B<clive "http://www.youtube.com/watch?v=DUM1284TqFc" -n>

Do not download the video. Print the video details only.

=item B<echo "http://www.youtube.com/watch?v=DUM1284TqFc" | clive>

Yet another way to feed clive with an URL. Or feed several on one go:

  % cat >> urls.lst
  http://www.youtube.com/watch?v=DUM1284TqFc
  http://www.youtube.com/watch?v=TqgTz8ymZl8
  (ctrl+d)
  % clive < urls.lst

=back

=head1 FILES

=over 4

=item B<~/.cliverc>

Additional search paths:

    ~/.clive/config
    ~/.config/clive/config

For a system-wide configuration:

    /usr/local/share/clive/config
    /usr/share/clive/config
    /etc/clive/config
    /etc/xdg/clive/clive.conf
    /etc/xdg/clive.conf

You can also set CLIVE_CONFIG, e.g.:

    env CLIVE_CONFIG=/path/to/config/file clive

Or use C<--config-file>, e.g.:

    clive --config-file /path/to/config/file

A typical configuration file could look like:

    --quvi "/usr/bin/quvi %u"
    --get-with "/usr/bin/curl -L -C - -o %f %u"
    --filename-format "%t_%i.%s"
    --exec "/usr/bin/vlc %f"

You should consider setting at least the C<--quvi> and C<--get-with>.

=back

=head1 EXIT STATUS

clive exits with 0 on success, otherwise the code is E<gt>0. Strictly clive
exit statuses are 0 or 1. For example, if command line parsing fails, the exit
status is 1.

When an error occurs in another command invoked by clive, e.g. C<quvi(1)>,
clive exits with the exit status returned by the command.

If you are planning to use clive for anything more peculiar, you should feed
it only one URL at a time. For example:

    * You feed clive two URLs
    * The 1st one fails, quvi exits with a non-zero value
    * clive proceeds to the 2nd URL, quvi now exits with zero value
    * clive exits with the zero, even if the 1st URL failed

=head1 COMMON ISSUES

=over 4

=item B<error: specify path to quvi(1) command with --quvi>

clive uses C<quvi(1)> to parse the video details. Use the C<--quvi> to specify
the path. See also L</FILES>.

=item B<error: specify path to a download command with --get-with>

clive uses a 3rd party command to download the videos. Use the C<--get-with> to
specify the path. See also L</FILES>.

=back

=head1 SEE ALSO

C<quvi(1)>  C<wget(1)>  C<curl(1)>

=head1 WWW

<http://clive.sourceforge.net/>

=head1 AUTHOR

Toni Gundogdu <legatvs at sign gmail com>.

Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.
