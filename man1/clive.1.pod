=head1 NAME

clive - (c)ommand (li)ne (v)ideo (e)xtration tool

=head1 SYNOPSIS

clive [E<lt>optionsE<gt>] [E<lt>urlE<gt> | E<lt>fileE<gt> ...]

=head1 DESCRIPTION

clive is a command line media extraction tool for Youtube and similar
websites that require Adobe Flash.

=head1 HISTORY

clive originates from the need to work around the Adobe Flash player
requirement with YouTube. It was originally a simple shell script
that parsed the media stream URLs and used a third party command
to download the media.

=head1 GETTING STARTED

clive attempts to detect the typical commands used with L</--quvi> and
L</--get-with> from the $PATH, and uses the predefined values with them.

See L</FILES> for an example configuration file. You should at least
define L</--quvi> and L</--get-with> in your configuration file for
seamless use.

The sections L</TROUBLESHOOTING> and L</EXAMPLES> contain invaluable
information about using clive.

=head1 OPTIONS

=over 4

=item B<--help>

Print help and exit.

=item B<--version>

Print version and exit.

=item B<--license>

Print license and exit.

=item B<-q, --quiet>

Turn off all I<clive> output excluding errors. Note that this switch has no
effect on any of the third party commands that clive invokes.

=item B<-f, --format> I<arg> (=default)

Download I<arg> format of the media. I<arg> may be C<help>.

=item B<-O, --output-file> I<arg>

Write media to I<arg>. Overrides C<--filename-format>.

=item B<-n, --no-download>

Do not download the media, print details only.

=item B<--config-file> I<arg>

Path to a file to read clive arguments from. See also L</FILES>.

=back

=head1 OPTIONS - CONFIGURATION

In addition to the command line, the options may also be read from the
configuration file. See L</FILES>.

=over 4

=item B<--quvi> I<arg>

I<arg> to be invoked to start the C<quvi(1)> command which clive uses to
parse the media details. This is typically a full path to C<quvi(1)> with
any additional options. Overrides any value set by autodetection.

The following specifiers can be used in the I<arg>:

  %u .. Media stream URL

I<All> occurences of the specifier will be replaced. clive will
automatically append C<--quiet> to I<arg>.

NOTE: If you use an HTTP proxy with C<quvi(1)>, you should do the same with
C<--get-with> -- especially if the proxy masks your (real) IP. Some websites
may refuse connections originating from different IPs to (unique, generated)
media stream URLs.

=item B<--get-with> I<arg>

Path to a download command (e.g. C<wget(1)> or C<curl(1)>) with any additional
arguments. clive invokes this command to download the media.  Overrides any
value set by autodetection.

The following specifiers are supported:

  %u  Media stream URL
  %f  Full path to media file
  %n  Media file name

I<All> occurences of the specifier will be replaced. See also the
note above about using an HTTP proxy with C<--quvi>.

=item B<--filename-format> I<arg> (="%t.%s")

Use I<arg> to specify the media output filename format.
The following specifiers are supported:

  %t  Media title (after applying --regexp)
  %i  Media ID
  %h  Media host ID (req. quvi 0.2.8+)
  %s  Media file suffix (parsed from server returned content-type)

I<All> occurences of the specifier will be replaced.

=item B<--regexp> I<arg> (="/(\w|\s)/g")

Use regular expression I<arg> to clean up the media title before
it is used in the filename. The syntax supports both "i"
(case-insensitive) and "g" (global or "find all").

=item B<--exec> I<arg>

Invoke I<arg> after media download finishes. The following specifiers
are supported:

  %f  Full path to the downloaded media file

I<All> occurences of the specifier will be replaced.

=back

=head1 TROUBLESHOOTING

=over 4

=item B<error: specify path to quvi(1) command with --quvi>

clive uses C<quvi(1)> to parse the media details. Use the C<--quvi> to specify
the path. See also L</FILES>.

=item B<error: specify path to a download command with --get-with>

clive uses a 3rd party command to download the media. Use the C<--get-with> to
specify the path to such command. See also L</FILES>.

=back

=head1 FILES

=over 4

=item B<~/.cliverc>

Additional search paths:

  ~/.clive/config
  ~/.config/clive/config

For a system-wide configuration:

  /usr/local/share/clive/config
  /usr/share/clive/config
  /etc/clive/config
  /etc/xdg/clive/clive.conf
  /etc/xdg/clive.conf

You can also set CLIVE_CONFIG, e.g.:

  env CLIVE_CONFIG=/path/to/config/file clive

Or use C<--config-file>, e.g.:

  clive --config-file /path/to/config/file

A typical configuration file could look like:

  --quvi "/usr/bin/quvi %u"
 # Recommended value to be used with quvi 0.2.12+
 #  --quvi "/usr/bin/quvi --category-http %u"
  --get-with "/usr/bin/curl -L -C - -o %f %u"
  --filename-format "%t_%i.%s"
  --exec "/usr/bin/vlc %f"

You should set at very least L</--quvi> and L</--get-with> in your
configuration file for seamless use.

=back

=head1 EXAMPLES

These examples assume you have set C<--quvi> and C<--get-with> in the config
file. See L</FILES> for an example config file.

=over 4

=item B<clive "URL">

Typical use.

=item B<clive -f mp4_360 "YOUTUBE_URL">

Same but get the mp4_360p format of the media, instead.

=item B<clive -f list youtube>

Print the supported formats for "youtube".

=item B<clive -f list yout>

Yields the same results.

=item B<clive -f list dailym>

Yields the same results.

=item B<clive "URL" -n>

Do not download the media, print the details only.

=item B<echo "URL" | clive>

Read input from the pipeline. Similarly:

  % cat >> URLs
  URL1
  URL2
  (^D)
  % clive < URLs
  Or:
  % clive URLs

Please note that each URL must be separated with a newline character.

=back

=head1 EXIT STATUS

clive exits with 0 on success, otherwise the code is E<gt>0. Strictly clive
exit statuses are 0 or 1. For example, if command line parsing fails, the exit
status is 1.

When an error occurs in another command invoked by clive, e.g. C<quvi(1)>,
clive exits with the exit status returned by the command.

If you are planning to use clive for anything more peculiar, you should feed
it only one URL at a time. For example:

  * You feed clive two URLs
  * The 1st one fails, quvi exits with a non-zero value
  * clive proceeds to the 2nd URL, quvi now exits with zero value
  * clive exits with the zero, even if the 1st URL failed

=head1 SEE ALSO

C<quvi(1)>  C<wget(1)>  C<curl(1)>

=head1 WWW

<http://clive.sourceforge.net/>

<http://quvi.sourceforge.net/>

=head1 AUTHOR

Toni Gundogdu E<lt>legatvs at sign gmail comE<gt>

Thanks to all those who have contributed to the project by sending
patches, reporting bugs and writing feedback. You know who you are.
